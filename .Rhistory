# Radius
r <- 2
# Function to compute the volume of a sphere with radius r
volume <- function(r, rho){
3/4*pi*r^2
}
# Radius
r <- 2
# Function to compute the volume of a sphere with radius r
volume <- function(r, rho){
3/4*pi*r^2
}
# Function to compute the volumes of the spheres with radius r, r^2 and r^3
volume_vector <- function(r){
r <- 22
for (r in 2:4){
volume(r)
}
}
# Run volume_vector(r) and print the volumes of the spheres with radius r, r^2 and r^3
volume_vector(r)
# Run volume_vector(r) and print the volumes of the spheres with radius r, r^2 and r^3
volume_vector(r)
# Run volume_vector(r) and print the volumes of the spheres with radius r, r^2 and r^3
print(volume_vector(r))
print(volume)
volume(r)
r <- 2
# Function to compute the volume of a sphere with radius r
volume <- function(r, rho){
4/3 * pi * r^3
}
# Function to compute the volumes of the spheres with radius r, r^2 and r^3
volume_vector <- function(r){
radius <- c(r, r^2, r^3)
volumes <- numeric(length(radius))
for (i in length(radius)){
volumes[i] <- volume(radius[i])
}
}
# Run volume_vector(r) and print the volumes of the spheres with radius r, r^2 and r^3
print(volume_vector(r))
r <- 2
# Function to compute the volume of a sphere with radius r
volume <- function(r, rho){
4/3 * pi * r^3
}
# Function to compute the volumes of the spheres with radius r, r^2 and r^3
volume_vector <- function(r){
radius <- c(r, r^2, r^3)
volumes <- numeric(length(radius))
for (i in seq_along(radius)){
volumes[i] <- volume(radius[i])
}
}
# Run volume_vector(r) and print the volumes of the spheres with radius r, r^2 and r^3
print(volume_vector(r))
r <- 2
# Function to compute the volume of a sphere with radius r
volume <- function(r, rho){
4/3 * pi * r^3
}
# Function to compute the volumes of the spheres with radius r, r^2 and r^3
volume_vector <- function(r){
radius <- c(r, r^2, r^3)
volumes <- numeric(length(radius))
for (i in seq_along(radius)){
volumes[i] <- volume(radius[i])
}
}
# Run volume_vector(r) and print the volumes of the spheres with radius r, r^2 and r^3
print(volume_vector(r))
r <- 2
# Function to compute the volume of a sphere with radius r
volume <- function(r, rho){
4/3 * pi * r^3
}
# Function to compute the volumes of the spheres with radius r, r^2 and r^3
volume_vector <- function(r){
radius <- c(r, r^2, r^3)
volumes <- numeric(length(radius))
for (i in seq_along(radius)){
volumes[i] <- volume(radius[i])
}
}
# Run volume_vector(r) and print the volumes of the spheres with radius r, r^2 and r^3
print(volume_vector(r))
# Radius
r <- 2
# Function to compute the volume of a sphere with radius r
volume <- function(r, rho){
4/3 * pi * r^3
}
# Function to compute the volumes of the spheres with radius r, r^2 and r^3
volume_vector <- function(r){
radius <- c(r, r^2, r^3)
volumes <- numeric(length(radius))
for (i in seq_along(radius)){
volumes[i] <- volume(radius[i])
}
return(volumes)
}
# Run volume_vector(r) and print the volumes of the spheres with radius r, r^2 and r^3
print(volume_vector(r))
r <- 2
# Function to compute the volume of a sphere with radius r
volume <- function(r) {
(4/3) * pi * r^3
}
# Function to compute the volumes of the spheres with radius r, r^2 and r^3
volume_vector <- function(r) {
radii <- c(r, r^2, r^3)  # Create a vector of the radii
volumes <- sapply(radii, volume)  # Apply the volume function to each radius
return(volumes)  # Return the volumes
}
# Run volume_vector(r) and print the volumes of the spheres with radius r, r^2 and r^3
volumes <- volume_vector(r)
print(volumes)
# Radius
r <- 2
# Function to compute the volume of a sphere with radius r
volume <- function(r, rho){
4/3 * pi * r^3
}
# Function to compute the volumes of the spheres with radius r, r^2 and r^3
volume_vector <- function(r){
rs <- c(r, r^2, r^3)
volumes <- numeric(length(rs))
for (i in seq_along(rs)){
volumes[i] <- volume(rs[i])
}
return(volumes)
}
# Run volume_vector(r) and print the volumes of the spheres with radius r, r^2 and r^3
print(volume_vector(r))
# Radius
r <- 2
# Function to compute the volume of a sphere with radius r
volume <- function(r, rho){
4/3 * pi * r^3
}
# Function to compute the volumes of the spheres with radius r, r^2 and r^3
volume_vector <- function(r){
rs <- c(r, r^2, r^3)
volumes <- numeric(length(rs))
for (i in seq_along(rs)){
volumes[i] <- volume(rs[i])
}
return(volumes)
}
# Run volume_vector(r) and print the volumes of the spheres with radius r, r^2 and r^3
print(volume_vector(r))
knitr::opts_chunk$set(echo = TRUE,message = FALSE, warning = FALSE,fig.width = 10,fig.height = 6)
x0 <- 0
N <- 1000
s <- 1
#pdf given
pdf <- function(x) {
return(0.5 * exp(-abs(x)))
}
#random walk metropolis given
metropolis <- function(x0, N, s) {
x <- numeric(N)
x[1] <- x0
for (i in 2:N) {
random_number <- rnorm(1, mean = x[i-1], sd = s)
log_r <- log(pdf(random_number)) - log(pdf(x[i-1]))
if (log(runif(1)) < log_r) {
x[i] <- random_number
} else {
x[i] <- x[i-1]
}
}
return(x)
}
print(x)
print(metropolis(x0, N, s))
print(metropolis(x0, N, s))
library(dplyr)
library(tidyr)
library(ggplot2)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
speeches <- read.csv("speeches.csv", header = TRUE, sep = "|")
fx <- read.csv("fx.csv")
speeches %>% filter(date, contents)
View(speeches)
speeches <- speeches %>% select(date, contents)
data <- left_join(fx, speeches, by = "date")
View(fx)
fx %>%  clean_names()
fx <- clean_names(fx)
names(fx) <- tolower(names(fx))
names(speeches) <- tolower(names(speeches))
data <- left_join(fx, speeches, by = "date")
View(fx)
View(data)
fx <- read.csv("fx.csv")
names(fx) <- tolower(names(fx))
names(fx)[3] <- "rate"
data <- left_join(fx, speeches, by = "date")
View(data)
plot(data, x=date, y=rate)
plot(data$date, data$rate, type = "l")
plot(data$date, data$rate)
plot(data$date, data$rate)
boxplot(data$rate)
ggplot(data, aes(x = date, y = rate)) +
geom_line() +
labs(x = "Date", y = "Rate", title = "Rate over Time")
data$date <- as.Date(data$date)
ggplot(data, aes(x = date, y = rate)) +
geom_line() +
labs(x = "Date", y = "Rate", title = "Rate over Time")
ggplot(data, aes(x = date, y = rate)) +
geom_line() +
labs(x = "Date", y = "Rate", title = "Rate over Time") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"),
axis.line = element_line(color = "black")
)
boxplot(data$rate)
ggplot(data, aes(x = date, y = rate)) +
geom_line() +
labs(x = "Date", y = "Rate", title = "EUR/USD reference exchange rate over Time") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"),
axis.line = element_line(color = "black")
)
full_data <- full_join(fx, speeches, by = "date")
data$date <- as.Date(data$date)
boxplot(data$rate)
ggplot(data, aes(x = date, y = rate)) +
geom_line() +
labs(x = "Date", y = "Rate", title = "EUR/USD reference exchange rate over Time") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"),
axis.line = element_line(color = "black")
)
sum(is.na(data$rate))
sum(is.na(data$rate))
data <- data %>%
arrange(date) %>%
fill(rate, .direction = "down") %>%
filter(!is.na(rate))  #será que a 1st row é NA?
data <- data %>%
arrange(date) %>%
fill(rate, .direction = "down") %>%
filter(!is.na(rate))
ggplot(data, aes(x = date, y = rate)) +
geom_line() +
labs(x = "Date", y = "Rate", title = "EUR/USD reference exchange rate over Time") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"),
axis.line = element_line(color = "black")
)
data <- data %>%
arrange(date) %>%
mutate(
return = 100 * (rate / lag(rate) - 1),
good_news = ifelse(return > 0.5, 1, 0),
bad_news = ifelse(return < -0.5, 1, 0)
)
#merge
data <- left_join(fx, speeches, by = "date")
data$date <- as.Date(data$date)
#check for outliers
boxplot(data$rate)
ggplot(data, aes(x = date, y = rate)) +
geom_line() +
labs(x = "Date", y = "Rate", title = "EUR/USD reference exchange rate over Time") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"),
axis.line = element_line(color = "black")
)
#handling missings
sum(is.na(data$rate))
data <- data %>%
arrange(date) %>%
fill(rate, .direction = "down") %>%
filter(!is.na(rate))
data <- data %>%
arrange(date) %>%
mutate(
return = 100 * (rate / lag(rate) - 1),
good_news = ifelse(return > 0.5, 1, 0),
bad_news = ifelse(return < -0.5, 1, 0)
)
View(data)
#remove NA contents
data <- data %>% filter(!is.na(contents))
View(data)
data_words <- fx_clean %>%
select(contents, good_news, bad_news) %>%
unnest_tokens(word, contents) %>%
anti_join(stop_words, by = "word")
intall.packages("tidytext")
install.packages("tidytext")
library(tidytext)
data_words <- fx_clean %>%
select(contents, good_news, bad_news) %>%
unnest_tokens(word, contents) %>%
anti_join(stop_words, by = "word")
data_words <- data %>%
select(contents, good_news, bad_news) %>%
unnest_tokens(word, contents) %>%
anti_join(stop_words, by = "word")
View(data_words)
good_indicators <- data_words %>%
filter(good_news == 1) %>%
count(word, sort = TRUE) %>%
slice_head(n = 20)
View(good_indicators)
install.packages("stopwords")
library(stopwords)
euro_words <- tibble(
word = c(stopwords("en"), stopwords("pt"), stopwords("es"), stopwords("fr"), stopwords("de")),
lexicon = "combined"
)
data_words <- data %>%
select(contents, good_news, bad_news) %>%
unnest_tokens(word, contents) %>%
anti_join(euro_words, by = "word")
good_indicators <- data_words %>%
filter(good_news == 1) %>%
count(word, sort = TRUE) %>%
slice_head(n = 20)
#bad indicators
bad_indicators <- data_words %>%
filter(bad_news == 1) %>%
count(word, sort = TRUE) %>%
slice_head(n = 20)
View(bad_indicators)
#good indicators
good_indicators <- data_words %>%
filter(good_news == 1) %>%
count(word, sort = TRUE)
write.csv(good_indicators, "good_indicators.csv", row.names = FALSE)
write.csv(bad_indicators, "bad_indicators.csv", row.names = FALSE)
